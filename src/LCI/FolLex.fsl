{
 (* File Fun/Funlex.fsl 
    Lexer for a tiny First Order Logic language  
    osto@itu.dk * 2017-06-02
  *)

module FolLex

open Microsoft.FSharp.Text.Lexing
open FolPar;

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Start of outermost comment currently being scanned *)
let commentStart = ref Position.Empty;  
 
let commentDepth = ref 0;  (* Current comment nesting *)

(* Distinguish keywords from identifiers: *)


let keyword s =
    match s with
    | "let"     -> LET
    | "in"      -> IN
    | "atom"    -> ATOM
    | "end"     -> END
    | "not"     -> NOT
    | "and"     -> AND
    | "implies" -> IMPL
    | "forall"  -> FORALL
    | "exists"  -> EXISTS
    | "or"      -> OR
    | "true"    -> CSTBOOL true
    | "false"   -> CSTBOOL false
    | _         -> NAME s

let cEscape s =
  match s with 
  | "\\\\" -> '\\'
  | "\\\"" -> '\"'
  | "\\a"  -> '\007'
  | "\\b"  -> '\008'
  | "\\t"  -> '\t'
  | "\\n"  -> '\n'
  | "\\v"  -> '\011'
  | "\\f"  -> '\012'
  | "\\r"  -> '\r'
  | _      -> failwith "Lexer error: impossible escape"

}


rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | "(*"            { commentStart := lexbuf.StartPos;
                      commentDepth := 1; 
                      SkipComment lexbuf; Token lexbuf }
  | "&&"            { AND    }
  | "∧"             { AND    }
  | "||"            { OR     }
  | "∨"             { OR     }
  | "=>"            { IMPL   }
  | "→"             { IMPL   }
  | "∀"             { FORALL }
  | "∃"             { EXISTS }
  | "["             { LSQBR  }
  | "]"             { RSQBR  }
  | ","             { COMMA  }
  | "."             { PERIOD }
  | "¬"             { NOT    }
  | "="             { EQ     }
  | ">"             { GRT    }
  | '+'             { PLUS   }
  | '-'             { MINUS  }
  | '*'             { MUL    }
  | '('             { LPAR   }
  | ')'             { RPAR   }
  | '"'             { CSTSTRING (String [] lexbuf) }
  | eof             { EOF   }
  | _               { failwith "Lexer error: illegal symbol, yo" }

and SkipComment = parse
    "*)"            { commentDepth := !commentDepth - 1;  
                      if !commentDepth = 0 then ()
                      else SkipComment lexbuf 
                    } 
   | "(*"           { commentDepth := !commentDepth + 1; 
                      SkipComment lexbuf }
   | eof            { failwith "Lexer error: unterminated comment" }
   | _              { SkipComment lexbuf }

and String chars = parse 
  | '"'
      { Microsoft.FSharp.Core.String.concat "" (List.map string (List.rev chars)) }
  | '\\' ['\\' '"' 'a' 'b' 't' 'n' 'v' 'f' 'r']
      { String (cEscape (lexemeAsString lexbuf) :: chars) lexbuf }
  | "''" 
      { String ('\'' :: chars) lexbuf }
  | '\\'
      { failwith "Lexer error: illegal escape sequence" }
  | (eof | '\026')
      { failwith "Lexer error: unterminated string" }
  | ['\n' '\r']
      { failwith "Lexer error: newline in string" }
  | ['\000'-'\031' '\127' '\255']
      { failwith "Lexer error: invalid character in string" }
  | _
      { String (char (lexbuf.LexemeChar 0) :: chars) lexbuf }
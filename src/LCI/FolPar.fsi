// Signature file for parser generated by fsyacc
type token = 
  | EOF
  | LPAR
  | RPAR
  | QUOT
  | OR
  | AND
  | EQ
  | ATOM
  | PLUS
  | MINUS
  | LET
  | IN
  | END
  | FALSE
  | NOT
  | TRUE
  | VAL
  | NAME of (string)
  | CSTBOOL of (bool)
  | CSTATOM of (string)
  | CSTINT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_QUOT
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_EQ
    | TOKEN_ATOM
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_TRUE
    | TOKEN_VAL
    | TOKEN_NAME
    | TOKEN_CSTBOOL
    | TOKEN_CSTATOM
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_Const
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (LCI.Fol.expr) 

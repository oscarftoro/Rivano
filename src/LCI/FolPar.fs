// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"

 (* File Fun/FunPar.fsy 
    Parser for a small First Order Logic Language;
    osto@itu.dk * 2016-02-06
  *)

 open LCI.Fol;

# 14 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | QUOT
  | OR
  | AND
  | EQ
  | ATOM
  | PLUS
  | MINUS
  | MUL
  | LET
  | IN
  | END
  | FALSE
  | NOT
  | TRUE
  | VAL
  | NAME of (string)
  | CSTBOOL of (bool)
  | CSTATOM of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_QUOT
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_EQ
    | TOKEN_ATOM
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MUL
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_TRUE
    | TOKEN_VAL
    | TOKEN_NAME
    | TOKEN_CSTBOOL
    | TOKEN_CSTATOM
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | QUOT  -> 3 
  | OR  -> 4 
  | AND  -> 5 
  | EQ  -> 6 
  | ATOM  -> 7 
  | PLUS  -> 8 
  | MINUS  -> 9 
  | MUL  -> 10 
  | LET  -> 11 
  | IN  -> 12 
  | END  -> 13 
  | FALSE  -> 14 
  | NOT  -> 15 
  | TRUE  -> 16 
  | VAL  -> 17 
  | NAME _ -> 18 
  | CSTBOOL _ -> 19 
  | CSTATOM _ -> 20 
  | CSTINT _ -> 21 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_QUOT 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_AND 
  | 6 -> TOKEN_EQ 
  | 7 -> TOKEN_ATOM 
  | 8 -> TOKEN_PLUS 
  | 9 -> TOKEN_MINUS 
  | 10 -> TOKEN_MUL 
  | 11 -> TOKEN_LET 
  | 12 -> TOKEN_IN 
  | 13 -> TOKEN_END 
  | 14 -> TOKEN_FALSE 
  | 15 -> TOKEN_NOT 
  | 16 -> TOKEN_TRUE 
  | 17 -> TOKEN_VAL 
  | 18 -> TOKEN_NAME 
  | 19 -> TOKEN_CSTBOOL 
  | 20 -> TOKEN_CSTATOM 
  | 21 -> TOKEN_CSTINT 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_AtExpr 
    | 10 -> NONTERM_AtExpr 
    | 11 -> NONTERM_AtExpr 
    | 12 -> NONTERM_AtExpr 
    | 13 -> NONTERM_Const 
    | 14 -> NONTERM_Const 
    | 15 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | QUOT  -> "QUOT" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | EQ  -> "EQ" 
  | ATOM  -> "ATOM" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MUL  -> "MUL" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | NOT  -> "NOT" 
  | TRUE  -> "TRUE" 
  | VAL  -> "VAL" 
  | NAME _ -> "NAME" 
  | CSTBOOL _ -> "CSTBOOL" 
  | CSTATOM _ -> "CSTATOM" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | QUOT  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | ATOM  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTATOM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 10us; 65535us; 0us; 2us; 14us; 5us; 15us; 6us; 16us; 7us; 17us; 8us; 18us; 9us; 19us; 10us; 24us; 11us; 25us; 12us; 27us; 13us; 10us; 65535us; 0us; 4us; 14us; 4us; 15us; 4us; 16us; 4us; 17us; 4us; 18us; 4us; 19us; 4us; 24us; 4us; 25us; 4us; 27us; 4us; 10us; 65535us; 0us; 20us; 14us; 20us; 15us; 20us; 16us; 20us; 17us; 20us; 18us; 20us; 19us; 20us; 24us; 20us; 25us; 20us; 27us; 20us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 14us; 25us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 6us; 1us; 3us; 4us; 6us; 7us; 8us; 1us; 1us; 1us; 2us; 6us; 3us; 3us; 4us; 6us; 7us; 8us; 6us; 3us; 4us; 4us; 6us; 7us; 8us; 6us; 3us; 4us; 5us; 6us; 7us; 8us; 6us; 3us; 4us; 6us; 6us; 7us; 8us; 6us; 3us; 4us; 6us; 7us; 7us; 8us; 6us; 3us; 4us; 6us; 7us; 8us; 8us; 6us; 3us; 4us; 6us; 7us; 8us; 11us; 6us; 3us; 4us; 6us; 7us; 8us; 11us; 6us; 3us; 4us; 6us; 7us; 8us; 12us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 11us; 13us; 15us; 22us; 29us; 36us; 43us; 50us; 57us; 64us; 71us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; |]
let _fsyacc_action_rows = 33
let _fsyacc_actionTableElements = [|7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 0us; 49152us; 6us; 32768us; 0us; 3us; 4us; 14us; 5us; 15us; 8us; 17us; 9us; 18us; 10us; 19us; 0us; 16385us; 0us; 16386us; 3us; 16387us; 8us; 17us; 9us; 18us; 10us; 19us; 3us; 16388us; 8us; 17us; 9us; 18us; 10us; 19us; 2us; 16389us; 9us; 18us; 10us; 19us; 2us; 16390us; 9us; 18us; 10us; 19us; 5us; 16391us; 4us; 14us; 5us; 15us; 8us; 17us; 9us; 18us; 10us; 19us; 5us; 16392us; 4us; 14us; 5us; 15us; 8us; 17us; 9us; 18us; 10us; 19us; 6us; 32768us; 4us; 14us; 5us; 15us; 8us; 17us; 9us; 18us; 10us; 19us; 12us; 25us; 6us; 32768us; 4us; 14us; 5us; 15us; 8us; 17us; 9us; 18us; 10us; 19us; 13us; 26us; 6us; 32768us; 2us; 28us; 4us; 14us; 5us; 15us; 8us; 17us; 9us; 18us; 10us; 19us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 18us; 23us; 1us; 32768us; 6us; 24us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 0us; 16395us; 7us; 32768us; 1us; 27us; 7us; 29us; 11us; 22us; 15us; 16us; 18us; 21us; 19us; 32us; 21us; 31us; 0us; 16396us; 1us; 32768us; 20us; 30us; 0us; 16397us; 0us; 16398us; 0us; 16399us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 16us; 17us; 18us; 22us; 26us; 29us; 32us; 38us; 44us; 51us; 58us; 65us; 73us; 81us; 89us; 97us; 105us; 113us; 114us; 115us; 117us; 119us; 127us; 135us; 136us; 144us; 145us; 147us; 148us; 149us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 3us; 2us; 3us; 3us; 3us; 1us; 1us; 7us; 3us; 2us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 16394us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 16398us; 16399us; |]
let _fsyacc_reductions ()  =    [| 
# 214 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LCI.Fol.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 223 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           _1                   
                   )
# 32 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : LCI.Fol.expr));
# 234 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           _1                   
                   )
# 37 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Expr));
# 245 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Dyadic("∨", _1, _3)  
                   )
# 39 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Expr));
# 257 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Dyadic("∧", _1, _3)  
                   )
# 41 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Expr));
# 269 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Monadic("¬", _2)     
                   )
# 43 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Expr));
# 280 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Dyadic("+", _1, _3)  
                   )
# 45 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Expr));
# 292 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Dyadic("-", _1, _3)  
                   )
# 47 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Expr));
# 304 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Dyadic("*", _1, _3)  
                   )
# 49 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Expr));
# 316 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           _1                   
                   )
# 55 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'AtExpr));
# 327 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Var _1               
                   )
# 57 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'AtExpr));
# 338 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Let(_2, _4, _6)      
                   )
# 59 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'AtExpr));
# 351 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           _2                   
                   )
# 61 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'AtExpr));
# 362 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           Atom(_2)             
                   )
# 66 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Const));
# 373 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           CInt(_1)             
                   )
# 68 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Const));
# 384 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                           CBool(_1)            
                   )
# 70 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fsy"
                 : 'Const));
|]
# 396 "/home/oscarftoro/Documentos/3.semester/Development/FSharp/Rivano/src/LCI/FolPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : LCI.Fol.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))

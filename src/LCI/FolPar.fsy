%{
 (* File Fun/FunPar.fsy 
    Parser for a small First Order Logic Language;
    osto@itu.dk * 2016-02-06
  *)

 open LCI.Fol;
%}
%token <int> CSTINT
%token <string> CSTATOM
%token <bool> CSTBOOL
%token <string> NAME

%token LET IN END FALSE NOT TRUE VAL
%token OR AND EQ ATOM PLUS MINUS MUL
%token LPAR RPAR QUOT
%token EOF
             
%left OR AND 
%left PLUS
%left EQ 

%nonassoc NOT           

%start Main
%type <LCI.Fol.expr> Main 

%%

Main:
  Expr EOF                        
    { $1                   }
;

Expr:
  AtExpr                                
    { $1                   }
  | Expr OR  Expr                       
    { Dyadic("∨", $1, $3)  }
  | Expr AND Expr                       
    { Dyadic("∧", $1, $3)  }
  | NOT Expr                            
    { Monadic("¬", $2)     }
  | Expr PLUS Expr 
    { Dyadic("+", $1, $3)  }  
  | Expr MINUS Expr 
    { Dyadic("-", $1, $3)  }  
  | Expr MUL Expr 
    { Dyadic("*", $1, $3)  }    

;

AtExpr:
  Const                                 
    { $1                   }
  | NAME                                
    { Var $1               }
  | LET NAME EQ Expr IN Expr END        
    { Let($2, $4, $6)      }
  | LPAR Expr RPAR                      
    { $2                   }
;

Const:
  ATOM CSTATOM                                 
    { Atom($2)             }
  | CSTINT                              
    { CInt($1)             }
  | CSTBOOL                             
    { CBool($1)            }  
;
   



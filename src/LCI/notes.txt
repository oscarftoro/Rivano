fsharpi -r lib/FsLexYacc.Runtime.dll src/LCI/FOL.fs src/LCI/FolPar.fs src/LCI/FolLex.fs src/LCI/Parse.fs

fsharpi -r ~/Apps/FsLexYacc/bin/FsLexYacc.Runtime.dll FOL.fs FolPar.fs FolLex.fs Parse.fs

or

fsharpi -r  ../../packages/FsLexYacc.Runtime/lib/portable-net45+netcore45+wpa81+wp8+MonoAndroid10+MonoTouch10/FsLexYacc.Runtime.dll -r ../../packages/System.Runtime/lib/net462/System.Runtime.dll -r ../../packages/System.IO/lib/net462/System.IO.dll FOL.fs FolPar.fs FolLex.fs Parse.fs 

Strings
--------
> open Parse;;
> fromString("let x = atom \"hola\" in x end");;

Substraction
------------

> fromString ("5-2");;
> let x = fromString("let y = 8 in y - 3 end");;  
> open LCI.Fol;;
> eval(x) [];;


And/Or
------

> open Parse;;
> open LCI.Fol;;
> fromString("true or false");;
val it : expr = Dyadic ("∨",CBool true,CBool false)
> let ff = fromString("true or false");;

val ff : expr = Dyadic ("∨",CBool true,CBool false)

> eval ff [];;
val it : value = Boolean 1
> let ff = fromString("true implies false");;

Implies
-------

val ff : expr = Dyadic ("→",CBool true,CBool false)

> eval ff [];;                               
val it : value = Boolean 0
> let ff = fromString("true => false");;     

val ff : expr = Dyadic ("→",CBool true,CBool false)

> eval ff [];;                               
val it : value = Boolean 0
> 

Atomic formulas (atom)
----------------------

> fromString("let x = atom \"poet\" in x or  atom \"rich\" end");;
val it : expr = Let ("x",Atom "poet",Dyadic ("∨",Var "x",Atom "rich"))
> fromString("let x = atom \"musician\" in x implies  atom \"rich\" end");;
val it : expr = Let ("x",Atom "musician",Dyadic ("→",Var "x",Atom "rich"))

> fromString("\"holi\"");;
val it : expr = CString "holi"
> fromString("\"3\"");;   
val it : expr = CString "3"
> fromString("atom \"3\"");;
val it : expr = Atom (CString "3")
> fromString("atom 3 + 2");;
val it : expr = Atom (Dyadic ("+",CInt 3,CInt 2))
> fromString("atom 3 + 2 * 3");;
val it : expr = Atom (Dyadic ("*",Dyadic ("+",CInt 3,CInt 2),CInt 3))
> fromString("atom true or false");;
val it : expr = Atom (Dyadic ("∨",CBool true,CBool false))

Equality 
--------

> open Parse;;
> open LCI.Fol
- ;;
> fromString("2 = 2");;
val it : expr = Dyadic ("=",CInt 2,CInt 2)
> let eq = fromString("2 = 2");;

val eq : expr = Dyadic ("=",CInt 2,CInt 2)

> eval eq [];;
val it : value = Boolean 1
> fromString("forall x. x = 2");;
val it : expr = ForAll ("x",Dyadic ("=",Var "x",CInt 2))
> let fa = fromString("forall x. x = 2");;

val fa : expr = ForAll ("x",Dyadic ("=",Var "x",CInt 2))

> eval fa [];;                            
val it : value = Boolean 0

Lists
------

fromString("let x = [1,2,3,4] in x end");;
fromString("let x = [true, false,false,true] in x end");


ForAll
------
> open Parse;;
> open LCI.Fol;; 

fromString("let X = [1,2,3,4] in forall x in X. x = x end");;
val it : LCI.Fol.expr =
  Let
    ("X",CList [CInt 1; CInt 2; CInt 3; CInt 4],
     ForAll ("x","X",Dyadic ("=",Var "x",Var "x")))


> let test = fromString("let X = [1,2,3,4] in forall x in X. x = x end");;

val test : expr =
  Let
    ("X",CList [CInt 1; CInt 2; CInt 3; CInt 4],
     ForAll ("x","X",Dyadic ("=",Var "x",Var "x")))

> eval test;;
val it : (Value env -> Value) = <fun:it@11>
> eval test [] ;;

Greater Than (>)
----------------
> open Parse;;
> open LCI.Fol

> fromString("12 > 3");;
val it : expr = Dyadic (">",CInt 12,CInt 3)
> let test = fromString("12 > 3");;

val test : expr = Dyadic (">",CInt 12,CInt 3)

> eval test [];;
val it : Value = Boolean 1

> fromString("12 > 3");;
val it : expr = Dyadic (">",CInt 12,CInt 3)
> let test = fromString("12 > 3");;

val test : expr = Dyadic (">",CInt 12,CInt 3)

> eval test [];;
val it : Value = Boolean 1
> let test = fromString("let X = [1,2,3,4] in forall x in X. x > 0 end");;

val test : expr =
  Let
    ("X",CList [CInt 1; CInt 2; CInt 3; CInt 4],
     ForAll ("x","X",Dyadic (">",Var "x",CInt 0)))

> eval test [];;
val it : Value = Boolean 1
> let test = fromString("let X = [1,2,3,4] in forall x in X. x > 5 end");;

val test : expr =
  Let
    ("X",CList [CInt 1; CInt 2; CInt 3; CInt 4],
     ForAll ("x","X",Dyadic (">",Var "x",CInt 5)))

> eval test [];;
val it : Value = Boolean 0

Less Than (>)
-------------
open Parse;;  fromString("12 < 3");;

> let test = fromString("let X = [1,2,3,4] in forall x in X. x < 0 end");;

val test : expr =
  Let
    ("X",CList [CInt 1; CInt 2; CInt 3; CInt 4],
     ForAll ("x","X",Dyadic ("<",Var "x",CInt 0)))

> eval test [];;
val it : Value = Boolean 0

> let test = fromString("let X = [1,2,3,4] in forall x in X. x > 0 end");;

val test : expr =
  Let
    ("X",CList [CInt 1; CInt 2; CInt 3; CInt 4],
     ForAll ("x","X",Dyadic (">",Var "x",CInt 0)))

> eval test [];;
val it : Value = Boolean 1
